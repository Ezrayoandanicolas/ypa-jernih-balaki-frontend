"use strict";
var common_1 = require("@visual-filter/common");
module.exports = function applyFilter(filter, methods, data) {
    function buildPremiseTree(filter) {
        if (filter.type === common_1.FilterType.CONDITION) {
            return data
                .find(function (field) { return field.name === filter.fieldName; })
                .values.map(function (value) {
                try {
                    return methods[filter.dataType][filter.method](value, filter.argument);
                }
                catch (_a) {
                    return false;
                }
            });
        }
        return filter.filters.map(buildPremiseTree);
    }
    function shouldntDeleteRow(rowIndex, premises, group) {
        var _a;
        for (var conditionIndex = 0; conditionIndex < premises.length; ++conditionIndex) {
            var currentPremise = ((_a = premises[conditionIndex][0]) === null || _a === void 0 ? void 0 : _a.constructor) === Array
                ? shouldntDeleteRow(rowIndex, premises[conditionIndex], group.filters[conditionIndex])
                : premises[conditionIndex][rowIndex];
            if (currentPremise === true) {
                switch (group.groupType) {
                    case common_1.GroupType.AND:
                        continue;
                    case common_1.GroupType.NOT_AND:
                        return false;
                    case common_1.GroupType.OR:
                        return true;
                    case common_1.GroupType.NOT_OR:
                        continue;
                }
            }
            else {
                switch (group.groupType) {
                    case common_1.GroupType.AND:
                        return false;
                    case common_1.GroupType.NOT_AND:
                        continue;
                    case common_1.GroupType.OR:
                        continue;
                    case common_1.GroupType.NOT_OR:
                        return true;
                }
            }
        }
        switch (group.groupType) {
            case common_1.GroupType.AND:
            case common_1.GroupType.NOT_AND:
                return true;
            case common_1.GroupType.OR:
            case common_1.GroupType.NOT_OR:
                return false;
        }
    }
    var premiseTree = buildPremiseTree(filter);
    var _loop_1 = function (rowIndex, rowsCount, deletionCount) {
        if (shouldntDeleteRow(rowIndex, premiseTree, filter) === false) {
            data.forEach(function (field) {
                return field.values.splice(rowIndex - deletionCount, 1);
            });
            ++deletionCount;
        }
        out_deletionCount_1 = deletionCount;
    };
    var out_deletionCount_1;
    for (var rowIndex = 0, rowsCount = data[0].values.length, deletionCount = 0; rowIndex < rowsCount; ++rowIndex) {
        _loop_1(rowIndex, rowsCount, deletionCount);
        deletionCount = out_deletionCount_1;
    }
    return data;
};
//# sourceMappingURL=index.js.map